
- $id: cli-options
  type: object
  additionalProperties: false
  properties:
    node-version:
      enum: ["14.x", "15.x", "16.x"]
    protocol:
      enum: [inline, messaging, http1, http2]
    host: {const: localhost}
    port:
      anyOf:
        - type: integer
          minimum: 0
          maximum: 65535
        - type: string
    hook-cjs: {type: boolean}
    hook-esm: {type: boolean}
    rc-file: {type: string}

- $id: language-version
  enum:
    - "5"
    - "5.1"
    - "6"
    - "2015"
    - "7"
    - "2016"
    - "8"
    - "2017"
    - "9"
    - "2018"
    - "10"
    - "2019"
    - "11"
    - "2020"
    - "12"
    - "2021"

- $id: exclude
  type: array
  items: {type: string}

- $id: dist
  anyOf:
    - {type: string}
    - type: object
      additionalProperties: false
      required: [name]
      properties:
        name: {type: string}
        deep: {type: boolean}
        external: {type: boolean}

- $id: name-version
  anyOf:
    - type: string
      pattern: "^[^@]+@[^@]+$"
    - type: object
      additionalProperties: false
      required: [name, version]
      properties:
        name: {type: string}
        version: {type: string}

- $id: enabling-specifier
  anyOf:
    - {type: string}
    - type: object
      additionalProperties: false
      required: [glob]
      properties:
        glob: {type: string}
        enabled: {type: boolean}
    - type: object
      additionalProperties: false
      required: [path]
      properties:
        path: {type: string}
        enabled: {type: boolean}
    - type: object
      additionalProperties: false
      required: [dist]
      properties:
        dist: {$ref: dist}
        enabled: {type: boolean}

- $id: package-specifier
  anyOf:
    - {type: string}
    - type: object
      additionalProperties: false
      required: [glob]
      properties:
        glob: {type: string}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude: {$ref: exclude}
    - type: object
      additionalProperties: false
      required: [path]
      properties:
        path: {type: string}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude: {$ref: exclude}
    - type: object
      additionalProperties: false
      required: [dist]
      properties:
        dist: {$ref: dist}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude: {$ref: exclude}

- $id: configuration-data
  type: object
  additionalProperties: false
  properties:
    extends: {type: string}
    enabled:
      anyOf:
        - {type: boolean}
        - {type: string}
        - {$ref: enabling-specifier}
        - type: array
          items: {$ref: enabling-specifier}
    class-map-pruning: {type: boolean} # the code entities of a file are only included if the file fired a recorded event
    event-pruning: {type: boolean} # events are only recorded if they originated from an included file
    escape-prefix:
      type: string
      pattern: "^[a-zA-Z_$][a-zA-Z_$-9]*$"
    output:
      anyOf:
        - {type: string}
        - type: object
          additionalProperties: false
          properties:
            directory: {type: string}
            filename:
              type: string
              pattern: "^[^\/]+$"
    base:
      anyOf:
        - {type: string}
        - type: object
          additionalProperties: false
          required: [path]
          properties:
            path: {type: string}
    main:
      anyOf:
        - {type: string}
        - type: object
          additionalProperties: false
          required: [path]
          properties:
            path: {type: string}
    app-name: {type: string}
    name: {type: string}
    map-name: {type: string}
    feature: {type: string}
    feature-group: {type: string}
    labels:
      type: array
      items: {type: string}
    recorder:
      anyOf:
        - {type: string}
        - type: object
          additionalProperties: false
          required: [name]
          properties:
            name: {type: string}
    recording:
      anyOf:
        - type: string
          pattern: "^[^.]+.[^.]+$"
        - type: object
          additionalProperties: false
          required: [defined-class, method-id]
          properties:
            defined-class: {type: string}
            method-id: {type: string}
    frameworks:
      type: array
      items: {$ref: name-version}
    engine: {$ref: name-version}
    language: {$ref: name-version}
    packages:
      type: array
      items: {$ref: package-specifier}
    exclude: {$ref: exclude}

- $id: configuration
  type: object
  additionalProperties: false
  required: [data, path]
  properties:
    data: {$ref: configuration-data}
    path:
      anyOf:
        - {const: null}
        - {type: string}

- $id: request
  anyOf:
    - type: object
      additionalProperties: false
      required: [action, process, navigator, configuration]
      properties:
        action: {const: initialize}
        process:
          anyOf:
            - {const: null}
            - type: object
              additionalProperties: false
              required: [env, argv]
              properties:
                env:
                  type: object
                  additionalProperties: false
                  patternProperties:
                    "^[^=]+$": {type: string}
                version: {type: string}
                arch: {type: string}
                platform: {type: string}
                pid: {type: integer}
                ppid: {type: integer}
                execPath: {type: string}
                execArgv:
                  type: array
                  items: {type: string}
                argv:
                  type: array
                  items: {type: string}
        navigator:
          anyOf:
            - {const: null}
            - {type: object}
        configuration: {$ref: configuration}
    - type: object
      additionalProperties: false
      required: [action, session, reason]
      properties:
        action: {const: terminate}
        session: {type: string}
        reason:
          type: object
          additionalProperties: true
          required: [type]
          properties:
            type: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, source, path, content]
      properties:
        action: {const: instrument}
        session: {type: string}
        source:
          enum: [script, module]
        path: {type: string}
        content: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, origin, event]
      properties:
        action: {const: record}
        session: {type: string}
        origin: {type: string}
        event:
          type: object
          additionalProperties: true
          required: [id, event]
          properties:
            id: {type: integer}
            event:
              enum: [call, return]
    - type: object
      additionalProperties: false
      required: [action, session, configuration]
      properties:
        action: {const: start}
        session: {type: string}
        configuration: {$ref: configuration}
    - type: object
      additionalProperties: false
      required: [action, session, recording]
      properties:
        action: {const: stop}
        session: {type: string}
        recording: {type: string}
        synchronous: {type: boolean}
    - type: object
      additionalProperties: false
      required: [action, session, recording]
      properties:
        action: {const: play}
        session: {type: string}
        recording: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, recording]
      properties:
        action: {const: pause}
        session: {type: string}
        recording: {type: string}
