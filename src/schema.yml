
# enumeration #

- $id: encoding
  enum:
    - buffer
    - utf8
    - utf16le
    - latin1

- $id: event
  enum: [call, return]

- $id: source
  enum: [script, module]

- $id: recorder
  enum:
    - null
    - normal
    - mocha

- $id: protocol
  enum: [inline, messaging, http1, http2]

- $id: node-version
  enum: ["14.x", "15.x", "16.x"]

- $id: stdio-stream
  enum: [ignore, pipe, inherit]

- $id: signal
  enum: [SIGINT, SIGTERM, SIGKILL]

# other #

- $id: stdio
  anyOf:
    - $ref: stdio-stream
    - type: array
      minItems: 3
      maxItems: 3
      items: {$ref: stdio-stream}

- $id: cwd
  type: string
  pattern: "^/"

# - $id: recorder
#   anyOf:
#     -
#     - $ref: recorder-name
#     - type: object
#       additionalProperties: false
#       required: [name]
#       properties:
#         name: {$ref: recorder-name}

- $id: env
  type: object
  additionalProperties: false
  patternProperties:
    "^[^=]+$": {type: string}

- $id: name-version
  anyOf:
    - type: string
      pattern: "^[^@]+@[^@]+$"
    - type: object
      additionalProperties: false
      required: [name, version]
      properties:
        name: {type: string}
        version: {type: string}

- $id: cooked-specifier
  type: object
  additionalProperties: false
  required: [base, pattern, flags, data]
  properties:
    cwd: {$ref: cwd}
    pattern:
      type: string
    flags:
      type: string
    data: {type: object}

- $id: raw-specifier
  anyOf:
    - type: object
      additionalProperties: false
      required: [pattern]
      properties:
        pattern:
          type: string
        flags:
          type: string
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude:
          type: array
          items: {type: string}
    - type: object
      additionalProperties: false
      required: [glob]
      properties:
        glob: {type: string}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude:
          type: array
          items: {type: string}
    - type: object
      additionalProperties: false
      required: [path]
      properties:
        path: {type: string}
        recursive: {type: boolean}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude:
          type: array
          items: {type: string}
    - type: object
      additionalProperties: false
      required: [dist]
      properties:
        dist: {type: string}
        recursive: {type: boolean}
        nested: {type: boolean}
        external: {type: boolean}
        enabled: {type: boolean}
        shallow: {type: boolean}
        exclude:
          type: array
          items: {type: string}

- $id: package-specifier
  anyOf:
    - type: string
    - $ref: cooked-specifier
    - $ref: raw-specifier

- $id: enabled-specifier
  anyOf:
    - type: string
    - $ref: cooked-specifier
    - allOf:
      - $ref: raw-specifier
      - not:
          anyOf:
            - type: object
              required: [shallow]
            - type: object
              required: [exclude]

# configuration #

- $id: configuration
  type: object
  additionalProperties: false
  required: [cwd]
  properties:
    cwd: {$ref: cwd}
    extends:
      anyOf:
        - type: string
        - $ref: configuration
    # server
    protocol: {$ref: protocol}
    host: {const: localhost}
    port:
      anyOf:
        - type: string
        - type: integer
          minimum: 0
          maximum: 65535
    concurrency:
      anyOf:
        - type: integer
          minimum: 1
        - type: string
          pattern: "^[0-9]+%$"
    childeren:
      type: array
      items:
        anyOf:
          - type: string
          - type: array
            minItems: 1
            items: {type: string}
          - type: object
            additionalProperties: false
            required: [type, base, exec, argv, options]
            properties:
              type: {const: cooked}
              cwd: {$ref: cwd}
              exec: {type: string}
              argv:
                type: array
                items: {type: string}
              options:
                type: object
                additionalProperties: false
                required: [encoding, cwd, env, stdio, timeout, killSignal]
                properties:
                  encoding: {$ref: encoding}
                  cwd: {type: string}
                  env: {$ref: env}
                  stdio: {$ref: stdio}
                  timeout: {type: integer}
                  killSignal: {$ref: signal}
          - type: object
            additionalProperties: false
            required: [type, exec]
            properties:
              type: {const: spawn}
              recorder:
                enum:
                  - null
                  - normal
                  - mocha
              node-version: {$ref: node-version}
              configuration: {$ref: configuration}
              exec:
                anyOf:
                  - type: string
                  - type: array
                    items: {type: string}
              argv:
                type: array
                items: {type: string}
              options:
                type: object
                additionalProperties: false
                properties:
                  encoding: {$ref: encoding}
                  cwd: {type: string}
                  env: {$ref: env}
                  stdio: {$ref: stdio}
                  timeout: {type: integer}
                  killSignal: {$ref: signal}
          - type: object
            additionalProperties: false
            required: [type, main]
            properties:
              type: {const: fork}
              recorder:
                enum:
                  - null
                  - normal
              node-version: {$ref: node-version}
              configuration: {$ref: configuration}
              globbing: {type: boolean}
              main: {type: string}
              argv:
                type: array
                items: {type: string}
              options:
                type: object
                additionalProperties: false
                properties:
                  execPath: {type: string}
                  execArgv:
                    type: array
                    items: {type: string}
                  encoding: {$ref: encoding}
                  cwd: {type: string}
                  env: {$ref: env}
                  stdio: {$ref: stdio}
                  timeout: {type: integer}
                  killSignal: {$ref: signal}
    # client
    recorder: {$ref: recorder}
    hook-cjs: {type: boolean}
    hook-esm: {type: boolean}
    hook-http: {type: boolean}
    enabled:
      anyOf:
        - type: boolean
        - type: array
          items: {$ref: enabled-specifier}
    escape-prefix:
      type: string
      pattern: "^[a-zA-Z_$][a-zA-Z_$-9]*$"
    main:
      anyOf:
        - type: string
        - type: object
          additionalProperties: false
          required: [path]
          properties:
            path: {type: string}
    engine: {$ref: name-version}
    language: {$ref: name-version}
    packages:
      type: array
      items: {$ref: package-specifier}
    exclude:
      type: array
      items: {type: string}
    # recording
    recording:
      anyOf:
        - type: string
          pattern: "^[^.]+.[^.]+$"
        - type: object
          additionalProperties: false
          required: [defined-class, method-id]
          properties:
            defined-class: {type: string}
            method-id: {type: string}
    class-map-pruning: {type: boolean} # the code entities of a file are only included if the file fired a recorded event
    event-pruning: {type: boolean} # events are only recorded if they originated from an included file
    output:
      anyOf:
        - type: string
        - type: object
          additionalProperties: false
          properties:
            directory: {type: string}
            file-name:
              type: string
              pattern: "^[^\/]+$"
    base:
      anyOf:
        - type: string
        - type: object
          additionalProperties: false
          required: [path]
          properties:
            directory: {type: string}
    app-name: {type: string}
    map-name: {type: string}
    name: {type: string} # synonym for map-name
    feature: {type: string}
    feature-group: {type: string}
    labels:
      anyOf:
        - type: string
        - type: array
          items: {type: string}
    frameworks:
      anyOf:
        - type: string
        - type: array
          items: {$ref: name-version}

# request #

- $id: request
  anyOf:
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: initialize}
        session: {const: null}
        data: {}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: terminate}
        session: {type: string}
        data:
          type: object
          additionalProperties: true
          required: [type]
          properties:
            type: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: instrument}
        session: {type: string}
        data:
          type: object
          additionalProperties: false
          required: [source, path, content]
          properties:
            source: {$ref: source}
            path: {type: string}
            content: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: record}
        session: {type: string}
        data:
          type: object
          additionalProperties: false
          required: [origin, event]
          properties:
            origin:
              anyOf:
                - const: null
                - type: string
            event:
              type: object
              additionalProperties: true
              required: [id, event]
              properties:
                id: {type: integer}
                event: {$ref: event}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: start}
        session: {type: string}
        data: {}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: stop}
        session: {type: string}
        data: {type: string}
    - type: object
      additionalProperties: false
      required: [action, session, data]
      properties:
        action: {const: toggle}
        session: {type: string}
        data: {type: string}
